光标移动
	四个方向
	   k
	 h   l
	   j
	ctrl+f, ctrl+b	向下翻页，向上翻页
	ctrl+d, ctrl+u	向下翻半页，向下翻半页
	$	移动到行尾
	0	移动到行首
	w	移动到下一个词
	b	移动到上一个词
	gg	文档开始处
	G	文档末尾
	%	找到匹配的括号
	23gg/23G/:23	跳到23行
	gj/gk	当行很长时避免跳过对vim来说的一整行
	当前行的光标控制
		fx	移动到下一个x处，可用;来重复操作
		tx	和fx类似，但是移动到x的左边
		Fx	和fx类似，不过往回找
		^	移动到当前行的第一个字母
		)	下一个句子
		(	上一个句子
	文件里的光标移动
		H	屏幕最上面
		M	屏幕中间
		L	屏幕最下面
		*	读取光标处的字符串，并移动到再次出现的地方
		#	和*类似，往反方向
		/text	从光标处开始搜索text，并到达text出现的地方，按n重复
		?text	和/text类似，反方向
		`.	到达上次编辑文件的地方

编辑
	ctrl+n/ctrl+p	关键词自动填补
	i	当前字符左边插入
	a	当前字符右边插入
	I	行首插入
	A	行尾插入
	o	向下插入新行
	O	向上插入新行
	c{motion}	删除motion命令跨过的字符，并进入插入模式
			c$：删除从光标到行尾的字符，并进入插入模式
			ct!：删除从光标到下一个!的字符，并进入插入模式
			被删除的字符被存在剪贴板里，可以再粘贴出来
	C	从光标到行尾到剪贴板，进入插入模式
	d{motion}	和c{montion}类似，但不会进入插入模式
	D	从光标到行尾到剪贴板
	dd 	删除一行
	cc,S	删除一行后进入插入模式
	dw	删除一个单词
	cw	删除一个单词后进入插入模式
	x,dl	删除一个字符
	s,cl	删除一个字符后进入插入模式
	p	黏贴
	y	复制
	y{motion}
	yy	复制一行
	u	撤消
	使用多重剪贴板(寄存器)
		"kyy	拷贝当前行到寄存器k
	
查找替换
	r{motion}	替换当前字符
	R{motion}	替换当前字符及其后的字符，直至按Esc
	#	从光标向后查找整个关键词
	*	从光标向前查找整个关键词
	g#	从光标向后查找关键词
	g*	从光标向前查找关键词	
	fx, tx, Fx, Tx	当前行查找字符
	查找替换
		:s/search/replace
		:%s/search/replace	全部替换
		:1,3 s/search/replace	对1，3行有效
		:g/search/s//replace/g	全文替换
	.	代替一个字符
	*	代替一个或多个字符
	单词边界
		\<, \>	指定单词边界
		/\<d[a-z]*an\>	匹配以d开始，an结尾的单词
		/\$[0-9]*\.[0-9][0-9]	匹配有且只有两位小数的

Visual Mode操作
	ctrl+v	进入基于块的可视模式
	v	进入基于字符的可视模式
		vwww	选定光标前三个词
	V	进入基于行的可视模式
		Vjj	选定当前行以及下面两行
	c	删除选定的块
	I{string}<Esc>	选定块后按I，输入字符串，按Esc，可以在块内每一行出入相同的内容

避免重复操作	
	.	重复上一个命令
	数字+motion	重复命令次数
	记录宏
		qa -> motions -> q	将一系列动作记录到寄存器a
		@a	使用寄存器a中的宏

vim写代码
	]p	和p类似，但是会自动缩进适应当前代码
	%	匹配各种括号
	>> 	缩进代码
	<<	反缩进
	gd	到达光标所在处函数或变量的定义处
	K	在man里查找光标处的词
	[[	向前跳到顶格的第一个{
	[]	向前跳到顶格的第一个}
	][	向后跳到顶格的第一个{
	]]	向后跳到顶格的第一个}
	[{	跳到本块代码的开头
	[}	跳到本块代码的结尾
